<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	version="EE-3.5.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
	<batch:job name="syncOpportunitiesBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:process-records>
			<batch:step name="foreachOpportunityInAGetOpportunityInBStep">
				<enricher source="#[payload]" target="#[recordVars['opportunityInB']]"
					doc:name="store result in record var 'opportunityInB'">
					<sfdc:query-single config-ref="SalesforceB"
						query="SELECT Id FROM Opportunity WHERE Name = '#[payload['Name']]'"
						doc:name="query Opportunity in Salesforce Instance B" />
				</enricher>
			</batch:step>
			 <batch:step name="findOrCreateAccountInBSetp" filter-expression="! ('syncAccount'=='${account.sync.policy}')">
                <enricher source="#[payload]" target="#[flowVars['accountInB']]" doc:name="store result in accountInB">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name FROM Account WHERE Name = '#[payload['Account']['Name']]'" doc:name="query Account in  Salesforce Instance B"/>
                </enricher>
                <choice doc:name="Choice">
                    <when expression="#[flowVars['accountInB'] is NullPayload]">
                        <enricher doc:name="store result in idOfAccountInB" target="#[recordVars['idOfAccountInB']]">
	                        <processor-chain doc:name="Processor Chain">
                                <expression-component doc:name="remove unnecessary fields"><![CDATA[payload['Account'].remove('Id');
payload['Account'].put('NumberOfEmployees', Integer.parseInt(payload['Account']['NumberOfEmployees']) );]]></expression-component>
                                <set-payload value="#[ [payload['Account']]]" doc:name="Set Payload"/>
       		                     <sfdc:create config-ref="SalesforceB" type="Account" doc:name="create Account in Salesforce Instance B">
       	    	                     <sfdc:objects ref="#[payload]"/>
       	        	             </sfdc:create>
                                <expression-transformer expression="#[payload[0].getId()]" doc:name="get new account id"/>
	                        </processor-chain>
                        </enricher>
                    </when>
                    <otherwise>
                        <enricher target="#[recordVars['idOfAccountInB']]" doc:name="store result in idOfAccountInB">
     	                   <expression-transformer expression="#[flowVars['accountInB']['Id']]" doc:name="get new account id"/>
                        </enricher>
                    </otherwise>
                </choice>
                <expression-component doc:name="set Account ID"><![CDATA[payload.put('AccountId', recordVars['idOfAccountInB']);]]></expression-component>
            </batch:step>
            <batch:step name="setDummyAccountIdStep" filter-expression="! ('assignDummyAccount'=='${account.sync.policy}')">
                <expression-component doc:name="set Account ID"><![CDATA[payload.put('AccountId', '${account.id.in.b}');]]></expression-component>
            </batch:step>
			<batch:step name="foreachOpportunityInAUpsertOpportunityInBStep">
				<expression-component doc:name="set ID for upsert"><![CDATA[if (recordVars['opportunityInB'] instanceof NullPayload) {
	// Remove ID as it is an insert
	payload.remove('Id')
} else {
	// Add target system ID as it is an update
    payload.put('Id', recordVars['opportunityInB']['Id'])
}
]]></expression-component>
				<expression-component
					doc:name="remove unnecessary fields and map field types"><![CDATA[payload.remove('Account');
payload.remove('LastModifiedDate');
if (payload.get('Amount') == null) {
	payload.remove('Amount') 
} else {
	double doubleAmount = Double.parseDouble(payload.get('Amount'));
	payload.put('Amount', doubleAmount);
}

if (payload.get('CloseDate') == null) {
	payload.remove('CloseDate') 
} else {
	java.util.Date dateCloseDate = new java.text.SimpleDateFormat("yyyy-MM-dd").parse(payload.get('CloseDate'));
	payload.put('CloseDate', dateCloseDate);
}]]></expression-component>
				<batch:commit size="200" doc:name="Batch Commit">
                    <logger message="Opportunities to update/create: #[payload]" level="INFO" doc:name="log Opportunities to update/create"/>
                    <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Opportunity" doc:name="upsert Opportunities in Salesforce Instance B">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="Upsert result: #[payload]" level="INFO" doc:name="log Result"/>
				</batch:commit>
			</batch:step>
		</batch:process-records>
		<batch:on-complete>
			<json:object-to-json-transformer
				doc:name="transform BatchJobInstance to JSON" />
			<logger level="INFO" doc:name="log 'Migration process has finished'"
				message="Migration process has finished: #[payload]" />
		</batch:on-complete>
	</batch:job>

</mule>
